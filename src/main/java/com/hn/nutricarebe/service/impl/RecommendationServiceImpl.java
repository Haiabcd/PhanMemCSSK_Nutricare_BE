package com.hn.nutricarebe.service.impl;

import com.hn.nutricarebe.dto.response.ProfileDto;
import com.hn.nutricarebe.dto.response.RecoItemDto;
import com.hn.nutricarebe.entity.Profile;
import com.hn.nutricarebe.entity.UserAllergy;
import com.hn.nutricarebe.entity.UserCondition;
import com.hn.nutricarebe.exception.AppException;
import com.hn.nutricarebe.exception.ErrorCode;
import com.hn.nutricarebe.repository.ProfileRepository;
import com.hn.nutricarebe.repository.UserAllergyRepository;
import com.hn.nutricarebe.repository.UserConditionRepository;
import com.hn.nutricarebe.service.RecommendationService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import java.net.URI;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.Instant;
import java.time.Year;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.Locale;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class RecommendationServiceImpl implements RecommendationService {
    ProfileRepository profileRepository;
    UserAllergyRepository userAllergyRepository;
    UserConditionRepository userConditionRepository;

    /* ====== Ngu·ªìn uy t√≠n (FREE) ====== */
    private static final List<String> ARTICLE_FEEDS = Arrays.asList(
            // üáªüá≥ Vi·ªát Nam
            "https://vnexpress.net/rss/mon-ngon.rss",
            "https://vnexpress.net/rss/suc-khoe/van-dong.rss",
            "https://vnexpress.net/rss/suc-khoe/dinh-duong.rss",
            "https://tuoitre.vn/rss/dinh-duong.rss",
            "https://phunuvietnam.vn/rss/dinh-duong.rss",
            "https://kenh14.vn/rss.chn",
            "https://vtc.vn/rss/song-khoe.rss",
            "https://znews.vn/rss/suc-khoe.rss",
            "https://tuoitre.vn/rss/suc-khoe.rss"
            /*
            // üåç Qu·ªëc t·∫ø
            "https://www.health.harvard.edu/blog/category/nutrition/feed",
            "https://newsnetwork.mayoclinic.org/category/nutrition/feed/",
            "https://www.nutrition.gov/rss.xml",
            "https://newsinhealth.nih.gov/rss",
            "https://www.menshealth.com/fitness/rss"

                */
    );

    private static String youtubeSearchRss(String query) {
        // chu·∫©n ho√°: g·ªôp kho·∫£ng tr·∫Øng, c·∫Øt 120 k√Ω t·ª±, encode 1 l·∫ßn
        String q = Optional.ofNullable(query).orElse("")
                .trim().replaceAll("\\s+", " ");
        if (q.length() > 120) q = q.substring(0, 120);
        String enc = URLEncoder.encode(q, StandardCharsets.UTF_8);
        return "https://www.youtube.com/feeds/videos.xml?channel_id=UC07qJE1XtXyUo8SSfZPe7Tg" + enc;
    }


    private static String pubmedSearchUrl(String query) {
        return "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi" +
                "?db=pubmed&retmode=json&retmax=10&term=" +
                URLEncoder.encode(query, StandardCharsets.UTF_8);
    }

    @Override
    public List<RecoItemDto> find(int limit) {
        var auth = SecurityContextHolder.getContext().getAuthentication();
        if (auth == null || !auth.isAuthenticated())
            throw new AppException(ErrorCode.UNAUTHORIZED);
        UUID userId = UUID.fromString(auth.getName());

        Optional<Profile> p = profileRepository.findByUser_Id(userId);

        List<UserAllergy> la =  userAllergyRepository.findByUser_Id(userId);
        List<UserCondition> lc =  userConditionRepository.findByUser_Id(userId);

        List<String> allergyNames = la.stream()
                .map(ua -> ua.getAllergy() != null ? ua.getAllergy().getName() : null)
                .filter(Objects::nonNull)
                .map(String::trim)
                .filter(s -> !s.isEmpty())
                .distinct()
                .collect(Collectors.toList());

        List<String> conditionNames = lc.stream()
                .map(uc -> uc.getCondition() != null ? uc.getCondition().getName() : null)
                .filter(Objects::nonNull)
                .map(String::trim)
                .filter(s -> !s.isEmpty())
                .distinct()
                .collect(Collectors.toList());


        ProfileDto profile = p.map(pr -> ProfileDto.builder()
                        .goal(mapGoalToString(pr.getGoal()))
                        .activity(mapActivityToString(pr.getActivityLevel()))
                        .age(calcAge(pr.getBirthYear()))
                        .heightCm(pr.getHeightCm() == null ? null : pr.getHeightCm().doubleValue())
                        .weightKg(pr.getWeightKg() == null ? null : pr.getWeightKg().doubleValue())
                        .conditions(conditionNames)
                        .allergies(allergyNames)
                        .locale("vi")
                        .build())
                .orElseThrow(() -> new IllegalArgumentException("Profile not found for userId=" + userId));

        int lim = clampLimit(limit);

        List<RecoItemDto> items = new ArrayList<RecoItemDto>();
        String q = buildQuery(profile);
        List<String> keywords = buildKeywords(profile); // ƒë√£ lower-case & l·ªçc r·ªóng

        /*
        // 1) RSS b√†i vi·∫øt
        for (String rss : ARTICLE_FEEDS) {
            try {
                items.addAll(fetchRssArticles(rss));
            } catch (Exception ignore) {}
        }

        // 2) YouTube (RSS)
        try { items.addAll(fetchYoutubeVideos(q)); } catch (Exception ignore) {}

        // 3) PubMed
        try { items.addAll(fetchPubMed(q)); } catch (Exception ignore) {}

         */

        for (String rss : ARTICLE_FEEDS) {
            try {
                List<RecoItemDto> a = fetchRssArticles(rss);
                System.out.println("[RSS OK] " + rss + " -> " + a.size());
                items.addAll(a);
            } catch (Exception e) {
                System.err.println("[RSS ERR] " + rss + " -> " + e.getMessage());
            }
        }
//        try {
//            List<RecoItemDto> y = fetchYoutubeVideos(q);
//            System.out.println("[YT OK] -> " + y.size());
//            items.addAll(y);
//        } catch (Exception e) {
//            System.err.println("[YT ERR] " + e.getMessage());
//        }
        try {
            List<RecoItemDto> pm = fetchPubMed(q);
            System.out.println("[PM OK] -> " + pm.size());
            items.addAll(pm);
        } catch (Exception e) {
            System.err.println("[PM ERR] " + e.getMessage());
        }
        System.out.println("[TOTAL ITEMS BEFORE FILTER] " + items.size());


        // 4) L·ªçc theo keywords + ch·∫•m ƒëi·ªÉm (an to√†n null)
        List<RecoItemDto> filtered = new ArrayList<>();
        boolean noKw = keywords.isEmpty();

// Record t·∫°m cho d·ªÖ sort
        record Scored(RecoItemDto it, int score) {}

        List<Scored> scoredList = new ArrayList<>();
        for (RecoItemDto it : items) {
            String t = safeLower(it.getTitle());
            String s = safeLower(it.getSource());
            String hay = (t + " " + s).trim();

            int score = noKw ? 1 : relevanceScore(hay, keywords);
            if (score > 0) {
                scoredList.add(new Scored(it, score));
            }
        }

        int relaxThreshold = Math.max(3, lim / 2);
        if (!noKw && filtered.size() < relaxThreshold) {
            System.out.println("[FILTER] too few matches (" + filtered.size() + "), relax filter -> return unfiltered");
            filtered = new ArrayList<>(items); // b·ªè l·ªçc t·ª´ kh√≥a ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ d·ªØ li·ªáu
        }

        // 5) Sort theo th·ªùi gian (m·ªõi nh·∫•t tr∆∞·ªõc), null published cho xu·ªëng cu·ªëi
        filtered.sort(new java.util.Comparator<RecoItemDto>() {
            @Override
            public int compare(RecoItemDto a, RecoItemDto b) {
                Instant pa = a.getPublished();
                Instant pb = b.getPublished();
                if (pa == null && pb == null) return 0;
                if (pa == null) return 1;   // a xu·ªëng d∆∞·ªõi
                if (pb == null) return -1;  // b xu·ªëng d∆∞·ªõi
                // desc
                return pb.compareTo(pa);
            }
        });


        // 6) C·∫Øt limit
        if (filtered.size() > lim) {
            return new ArrayList<RecoItemDto>(filtered.subList(0, lim));
        }
        return filtered;
    }

    /* ============================ Helpers ============================ */

    private Integer calcAge(Integer birthYear) {
        if (birthYear == null) return null;
        int nowYear = Year.now().getValue();
        int age = nowYear - birthYear;
        return age >= 0 ? age : null;
    }

    private String mapGoalToString(com.hn.nutricarebe.enums.GoalType goal) {
        if (goal == null) return null;
        switch (goal) {
            case LOSE:    return "gi·∫£m c√¢n";
            case GAIN:    return "tƒÉng c∆°";
            case MAINTAIN:return "gi·ªØ c√¢n";
            default: return goal.name().toLowerCase();
        }
    }

    private String mapActivityToString(com.hn.nutricarebe.enums.ActivityLevel act) {
        if (act == null) return null;
        switch (act) {
            case SEDENTARY: return "√çt v·∫≠n ƒë·ªông";
            case LIGHTLY_ACTIVE:     return "V·∫≠n ƒë·ªông nh·∫π";
            case MODERATELY_ACTIVE:  return "V·∫≠n ƒë·ªông v·ª´a ph·∫£i";
            case VERY_ACTIVE:    return "V·∫≠n ƒë·ªông nhi·ªÅu";
            case EXTRA_ACTIVE: return "V·∫≠n ƒë·ªông r·∫•t nhi·ªÅu";
            default:        return act.name().toLowerCase();
        }
    }


    private List<RecoItemDto> fetchRssArticles(String rssUrl) throws Exception {
        Document doc = fetchDoc(rssUrl);
        List<RecoItemDto> out = new ArrayList<>();

        // Th·ª≠ RSS tr∆∞·ªõc
        List<Element> items = doc.select("item");
        boolean isAtom = false;
        if (items.isEmpty()) {
            items = doc.select("entry");
            isAtom = !items.isEmpty();
        }

        // C√°c t·ª´ kh√≥a b·∫Øt bu·ªôc ph·∫£i c√≥ ƒë·ªÉ l·ªçc (li√™n quan dinh d∆∞·ª°ng - th·ª±c ph·∫©m)
        List<String> foodKeywords = Arrays.asList(
                "ƒÉn", "m√≥n", "th·ª±c ph·∫©m", "dinh d∆∞·ª°ng", "th·ª±c ƒë∆°n",
                "ƒÉn ki√™ng", "gi·∫£m c√¢n", "tƒÉng c√¢n", "tƒÉng c∆°", "calo",
                "b·ªØa s√°ng", "b·ªØa tr∆∞a", "b·ªØa t·ªëi", "ch·∫ø ƒë·ªô ƒÉn", "ch·∫•t b√©o", "protein", "carb", "n∆∞·ªõc", "b·ªï sung"
        );

        for (Element it : items) {
            String title, link, pub, img = null, source;

            if (!isAtom) {
                title = text(it, "title");
                link = text(it, "link");
                pub = text(it, "pubDate");
                Element mt = it.selectFirst("media|thumbnail, thumbnail");
                if (mt != null) img = mt.hasAttr("url") ? mt.attr("url") : mt.attr("href");
                if (img == null) img = firstImgFromHtml(text(it, "description"));
            } else {
                title = text(it, "title");
                Element linkEl = it.selectFirst("link");
                link = (linkEl != null) ? (linkEl.hasAttr("href") ? linkEl.attr("href") : linkEl.text()) : "";
                pub = text(it, "updated");
                if (pub.isEmpty()) pub = text(it, "published");
                Element mt = it.selectFirst("media|thumbnail, thumbnail");
                if (mt != null) img = mt.hasAttr("url") ? mt.attr("url") : mt.attr("href");
                if (img == null) img = firstImgFromHtml(text(it, "summary"));
            }

            if (link == null || link.trim().isEmpty()) continue;

            // L·ªçc b√†i kh√¥ng li√™n quan ƒë·∫øn ƒÉn u·ªëng
            String lowerTitle = title == null ? "" : title.toLowerCase(Locale.ROOT);
            boolean related = foodKeywords.stream().anyMatch(lowerTitle::contains);
            if (!related) continue; // b·ªè qua b√†i kh√¥ng li√™n quan

            source = hostOf(link);
            Instant published = parsePub(pub);

            RecoItemDto dto = new RecoItemDto();
            dto.setType("article");
            dto.setTitle(title);
            dto.setUrl(link);
            dto.setSource(source);
            dto.setImageUrl(img);
            dto.setPublished(published);
            out.add(dto);
        }

        return out;
    }


    private List<RecoItemDto> fetchYoutubeVideos(String query) {
        return Collections.emptyList();
    }

    @SuppressWarnings("unchecked")
    private List<RecoItemDto> fetchPubMed(String query) throws Exception {
        // 1) esearch -> ids
        Document d1 = fetchDoc(pubmedSearchUrl(query));
        org.json.JSONObject search = new org.json.JSONObject(d1.text());
        org.json.JSONObject esr = search.optJSONObject("esearchresult");
        if (esr == null) return Collections.emptyList();
        org.json.JSONArray idList = esr.optJSONArray("idlist");
        if (idList == null || idList.length() == 0) return Collections.emptyList();

        List<String> idsArr = new ArrayList<String>();
        for (int i = 0; i < idList.length(); i++) {
            idsArr.add(String.valueOf(idList.get(i)));
        }
        String ids = join(idsArr, ",");

        // 2) esummary theo ids
        String sumUrl = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi" +
                "?db=pubmed&retmode=json&id=" + ids;
        Document d2 = fetchDoc(sumUrl);
        org.json.JSONObject root = new org.json.JSONObject(d2.text());
        org.json.JSONObject sum = root.optJSONObject("result");
        if (sum == null) return Collections.emptyList();

        List<RecoItemDto> out = new ArrayList<RecoItemDto>();
        String[] idSplit = ids.split(",");
        for (int i = 0; i < idSplit.length; i++) {
            String id = idSplit[i];
            if (!sum.has(id)) continue;
            org.json.JSONObject it = sum.getJSONObject(id);

            String title = it.optString("title");
            String link = "https://pubmed.ncbi.nlm.nih.gov/" + id + "/";
            Instant published = parsePub(it.optString("pubdate"));

            RecoItemDto dto = new RecoItemDto();
            dto.setType("article");
            dto.setTitle(title);
            dto.setUrl(link);
            dto.setSource("pubmed.ncbi.nlm.nih.gov");
            dto.setPublished(published);
            out.add(dto);
        }
        return out;
    }

    /* ===== Doc fetch (User-Agent tr√¨nh duy·ªát, tr√°nh 403) ===== */
    private Document fetchDoc(String url) throws Exception {
        return Jsoup.connect(url)
                .userAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) " +
                        "AppleWebKit/537.36 (KHTML, like Gecko) " +
                        "Chrome/124.0 Safari/537.36")
                .header("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
                .referrer("https://www.google.com")
                .ignoreContentType(true)
                .timeout(12000)
                .followRedirects(true)
                .get();
    }

    /* ================== tiny utils (Java 8 friendly) ================== */

    private static int clampLimit(int limit) {
        if (limit < 1) return 12;
        if (limit > 30) return 30;
        return limit;
    }

    private static String text(Element root, String css) {
        Element el = root.selectFirst(css);
        return (el != null) ? el.text() : "";
    }

    private static Instant parsePub(String s) {
        if (s == null || s.trim().isEmpty()) return null;
        try { return Instant.parse(s); } catch (Exception ignore) {}
        try {
            ZonedDateTime zdt = ZonedDateTime.parse(s, DateTimeFormatter.RFC_1123_DATE_TIME);
            return zdt.toInstant();
        } catch (Exception ignore) {}
        try {
            String t = s.replaceAll("\\(.*?\\)", "").trim();
            ZonedDateTime zdt = ZonedDateTime.parse(t, DateTimeFormatter.RFC_1123_DATE_TIME);
            return zdt.toInstant();
        } catch (Exception ignore) {}
        return null;
    }

    private static String hostOf(String url) {
        try {
            URI u = new URI(url);
            String h = u.getHost();
            return (h != null) ? h : "unknown";
        } catch (Exception e) {
            return "unknown";
        }
    }

    private static String firstImgFromHtml(String html) {
        if (html == null || html.isEmpty()) return null;
        Element img = Jsoup.parse(html).selectFirst("img");
        if (img == null) return null;
        String src = img.absUrl("src");
        return (src != null && !src.isEmpty()) ? src : null;
    }

    private static String buildQuery(ProfileDto p) {
        List<String> parts = new ArrayList<String>();
        if (p != null) {
            if (!isBlank(p.getGoal())) parts.add(p.getGoal());
            if (p.getConditions() != null)
                for (String c : p.getConditions()) if (!isBlank(c)) parts.add(c);
            if (p.getAllergies() != null)
                for (String a : p.getAllergies()) if (!isBlank(a)) parts.add(a);

            if ("vi".equalsIgnoreCase(p.getLocale())) {
                parts.add("dinh d∆∞·ª°ng");
                parts.add("th·ª±c ƒë∆°n");
                parts.add("gi·∫£m c√¢n");
                parts.add("d·ªã ·ª©ng");
                parts.add("b·ªánh n·ªÅn");
            } else {
                parts.add("nutrition");
                parts.add("diet");
                parts.add("meal plan");
            }
        }
        return join(parts, " ");
    }

    private static List<String> buildKeywords(ProfileDto p) {
        List<String> ks = new ArrayList<>();

        // ==== T·ª´ kh√≥a n·ªÅn lu√¥n c√≥ (VI) ====
        String[] baseVi = new String[]{
                "dinh d∆∞·ª°ng","th·ª±c ph·∫©m","m√≥n ƒÉn","c√¥ng th·ª©c","n·∫•u ƒÉn",
                "th·ª±c ƒë∆°n","ƒÉn ki√™ng","gi·∫£m c√¢n","tƒÉng c∆°",
                "t·∫≠p luy·ªán","b√†i t·∫≠p","th·ªÉ d·ª•c","v·∫≠n ƒë·ªông","calo","protein","carb","ch·∫•t b√©o"
        };
        // ==== B·∫£n EN c∆° b·∫£n ====
        String[] baseEn = new String[]{
                "nutrition","food","recipe","diet","meal plan","healthy",
                "weight loss","muscle gain","workout","exercise","training","calorie","protein","carb","fat"
        };
        ks.addAll(Arrays.asList(baseVi));
        ks.addAll(Arrays.asList(baseEn));

        if (p != null) {
            // goal -> th√™m t·ª´ kh√≥a ƒë·∫∑c th√π
            if (!isBlank(p.getGoal())) {
                addWithEnglish(ks, p.getGoal());
                String g = p.getGoal().toLowerCase(Locale.ROOT);
                if (g.contains("gi·∫£m")) {
                    Collections.addAll(ks, "ƒë·ªët m·ª°","low calorie","calo th·∫•p","ƒÉn ki√™ng l√†nh m·∫°nh","gi·∫£m m·ª°","cardio");
                } else if (g.contains("tƒÉng c∆°") || g.contains("tƒÉng")) {
                    Collections.addAll(ks, "high protein","protein cao","tƒÉng c√¢n l√†nh m·∫°nh","luy·ªán t·∫≠p s·ª©c m·∫°nh","strength training");
                } else if (g.contains("gi·ªØ c√¢n")) {
                    Collections.addAll(ks, "c√¢n b·∫±ng","balanced diet","duy tr√¨");
                }
            }

            // conditions
            if (p.getConditions() != null) {
                for (String c : p.getConditions()) {
                    addWithEnglish(ks, c);
                    String lc = c == null ? "" : c.toLowerCase(Locale.ROOT);
                    if (lc.contains("ti·ªÉu ƒë∆∞·ªùng") || lc.contains("ƒë√°i th√°o ƒë∆∞·ªùng") || lc.contains("diabetes")) {
                        Collections.addAll(ks, "ƒë∆∞·ªùng huy·∫øt","glycemic","low glycemic","√≠t ƒë∆∞·ªùng");
                    } else if (lc.contains("huy·∫øt √°p") || lc.contains("hypertension")) {
                        Collections.addAll(ks, "√≠t mu·ªëi","huy·∫øt √°p","tim m·∫°ch","heart healthy");
                    } else if (lc.contains("m·ª° m√°u") || lc.contains("cholesterol") || lc.contains("dyslipidemia")) {
                        Collections.addAll(ks, "√≠t ch·∫•t b√©o b√£o h√≤a","hdl","ldl","triglyceride");
                    }
                }
            }

            // allergies
            if (p.getAllergies() != null) {
                for (String a : p.getAllergies()) {
                    addWithEnglish(ks, a);
                    // VD: d·ªã ·ª©ng s·ªØa, tr·ª©ng -> b√†i vi·∫øt hay c√≥ t·ª´ n√†y
                }
            }

            // ∆∞u ti√™n VI n·∫øu locale 'vi'
            if (!"vi".equalsIgnoreCase(p.getLocale())) {
                // n·∫øu kh√¥ng ph·∫£i vi, ƒë·∫£m b·∫£o c√≥ EN c∆° b·∫£n
                for (String s : baseEn) if (!ks.contains(s)) ks.add(s);
            }
        }

        // distinct, normalize
        List<String> uniq = new ArrayList<>();
        for (String k : ks) {
            if (k != null) {
                String t = k.trim().toLowerCase(Locale.ROOT);
                if (!t.isEmpty() && !uniq.contains(t)) uniq.add(t);
            }
        }
        return uniq;
    }

    /* ==== relevance scoring (ƒëi·ªÉm m·ª©c li√™n quan) ==== */
    private static int relevanceScore(String haystack, List<String> keywords) {
        if (haystack == null || haystack.isEmpty() || keywords == null || keywords.isEmpty()) return 0;
        String s = haystack.toLowerCase(Locale.ROOT);
        int score = 0;
        for (String k : keywords) {
            if (k == null || k.isEmpty()) continue;
            // ƒë·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán ƒë∆°n gi·∫£n
            int idx = 0;
            while (true) {
                idx = s.indexOf(k, idx);
                if (idx < 0) break;
                score++;
                idx += k.length();
            }
        }
        return score;
    }



    private static String safeLower(String s) {
        if (s == null) return "";
        return s.toLowerCase(Locale.ROOT);
    }

    private static boolean isBlank(String s) {
        return (s == null || s.trim().isEmpty());
    }

    private static String join(List<String> parts, String sep) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < parts.size(); i++) {
            if (i > 0) sb.append(sep);
            sb.append(parts.get(i));
        }
        return sb.toString();
    }

    /** map vi -> en ƒë∆°n gi·∫£n cho goal/keywords ph·ªï bi·∫øn */
    private static String viToEn(String s) {
        if (s == null) return null;
        String t = s.trim().toLowerCase(Locale.ROOT);
        switch (t) {
            case "gi·∫£m c√¢n": return "weight loss";
            case "tƒÉng c√¢n": return "weight gain";
            case "tƒÉng c∆°":  return "muscle gain";
            case "gi·ªØ c√¢n":  return "maintenance";
            case "dinh d∆∞·ª°ng": return "nutrition";
            case "th·ª±c ƒë∆°n": return "meal plan";
            case "d·ªã ·ª©ng":   return "allergy";
            case "b·ªánh n·ªÅn": return "chronic disease";
            // m·ªôt s·ªë b·ªánh th∆∞·ªùng g·∫∑p (tu·ª≥ DB c·ªßa b·∫°n, b·ªï sung th√™m n·∫øu c·∫ßn):
            case "ti·ªÉu ƒë∆∞·ªùng":
            case "ƒë√°i th√°o ƒë∆∞·ªùng": return "diabetes";
            case "cao huy·∫øt √°p":
            case "tƒÉng huy·∫øt √°p":   return "hypertension";
            case "r·ªëi lo·∫°n m·ª° m√°u": return "dyslipidemia";
            case "b√©o ph√¨":         return "obesity";
            case "tim m·∫°ch":        return "cardiovascular";
            default: return null; // kh√¥ng d·ªãch ƒë∆∞·ª£c th√¨ tr·∫£ null
        }
    }

    /** Th√™m b·∫£n ti·∫øng Anh c·ªßa t·ª´ kh√≥a (n·∫øu c√≥) v√†o danh s√°ch */
    private static void addWithEnglish(List<String> bag, String vi) {
        if (isBlank(vi)) return;
        String viNorm = vi.toLowerCase(Locale.ROOT).trim();
        if (!bag.contains(viNorm)) bag.add(viNorm);
        String en = viToEn(vi);
        if (en != null && !bag.contains(en)) bag.add(en);
    }

    /** t·∫°o chu·ªói t√¨m ki·∫øm ti·∫øng Anh cho PubMed */
    private static String buildEnglishQuery(ProfileDto p) {
        List<String> parts = new ArrayList<>();
        if (p != null) {
            if (!isBlank(p.getGoal())) {
                String en = viToEn(p.getGoal());
                if (en != null) parts.add(en);
            }
            if (p.getConditions() != null) {
                for (String c : p.getConditions()) {
                    String en = viToEn(c);
                    parts.add(en != null ? en : c);
                }
            }
            if (p.getAllergies() != null) {
                for (String a : p.getAllergies()) {
                    String en = viToEn(a);
                    parts.add(en != null ? en : a);
                }
            }
            // th√™m c√°c t·ª´ chung b·∫±ng ti·∫øng Anh ƒë·ªÉ tƒÉng recall
            parts.add("nutrition");
            parts.add("diet");
            parts.add("meal plan");
        }
        return join(parts, " ");
    }

}
